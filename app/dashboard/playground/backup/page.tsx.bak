"use client"

import React, { useState, useRef, useEffect } from "react"
// Dashboard layout is provided by the parent layout.tsx
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar"
import { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from "@/components/ui/tooltip"
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs"
import { ScrollArea } from "@/components/ui/scroll-area"
import { Switch } from "@/components/ui/switch"
import { Separator } from "@/components/ui/separator"
import { Badge } from "@/components/ui/badge"
import { Slider } from "@/components/ui/slider"
import { AlertCircle, Bot, User, ChevronDown, Settings, Trash2, Sparkles, PanelRight, FileText, Send, RotateCw, X, Download, Brain, Zap, BrainCircuit, Menu, Check, ArrowUpDown, MailQuestion, PenLine, BotMessageSquare, MessageSquare, Loader2 } from "lucide-react"
import { toast } from "sonner"
import { v4 as uuidv4 } from 'uuid';
import api, { 
  Persona as ApiPersona, 
  Message as ApiMessage, 
  KnowledgeBase as ApiKnowledgeBase, 
  PlaygroundKnowledgeBase, 
  PlaygroundChatRequest,
  PlaygroundChatResponse
// Import from local context files or create them if they don't exist
import { useContext, createContext } from "react"
import { Label } from "@/components/ui/label"
import { Input } from "@/components/ui/input"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"
import { SectionHeader } from "@/components/ui/section-header";
import LazySection from "@/components/ui/lazy-section";
import { Textarea } from "@/components/ui/textarea"
import ErrorBoundary from "@/components/error-boundary"
import ProgressiveImage from "@/components/ui/progressive-image"

export default function Page() {
  // State definitions for the playground
  const [useKnowledgeBase, setUseKnowledgeBase] = useState(false);
  const [selectedKnowledgeBase, setSelectedKnowledgeBase] = useState("");
  const [temperature, setTemperature] = useState(0.7);
  const [maxTokens, setMaxTokens] = useState(1000);
  const [contextWindow, setContextWindow] = useState(10);
  const [isTyping, setIsTyping] = useState(false);
  const [messages, setMessages] = useState([]);
  const [knowledgeBases, setKnowledgeBases] = useState([]);
  const [showPersonaSection, setShowPersonaSection] = useState(true);
  const [showSettingsSection, setShowSettingsSection] = useState(true);
  const [showKnowledgeSection, setShowKnowledgeSection] = useState(true);
  
  // Sample data for demonstration
  const selectedPersona = { label: "AI Assistant" };
  const activePersona = { model: "gpt-4", name: "Assistant" };
  const aiModels = [
    { id: "gpt-4", description: "Advanced model for complex tasks" },
    { id: "gpt-3.5-turbo", description: "Fast and efficient" }
  ];
// ... (rest of the code remains the same)

// Personas section - lazy loaded for better performance
{showPersonaSection && (
  <LazySection rootMargin="300px 0px" animationClass="fade-in-up" delayMs={150}>
    <ErrorBoundary>
      <section className="mt-6">
      <SectionHeader
        title="Personas"
        description="Select a persona for your assistant."
      />
      {/* Personas content would go here */}
    </section>
  </LazySection>
)}

// ... (rest of the code remains the same)

// Settings section - lazy loaded for better performance
{showSettingsSection && (
  <LazySection rootMargin="400px 0px" animationClass="fade-in-up" delayMs={200}>
    <section className="mt-6">
      <SectionHeader
        title="Settings"
        description="Configure your playground settings."
      />
      {/* ... (rest of the settings section code remains the same) */}
    </section>
  </LazySection>
)}

// ... (rest of the code remains the same)

// Footer section with attribution - lazy loaded for better performance
<LazySection rootMargin="500px 0px" animationClass="fade-in" delayMs={250}>
  <footer className="bottom-6 mt-6 flex w-full flex-col justify-center py-10 text-center text-xs text-muted-foreground">
    {/* ... (rest of the footer section code remains the same) */}
  </footer>
</LazySection>

// ... (rest of the code remains the same)

// Knowledge base section - lazy loaded for better performance
{showKnowledgeSection && (
  <LazySection rootMargin="300px 0px" animationClass="fade-in-up" delayMs={100}>
    <ErrorBoundary>
      <section className="mt-6">
      <SectionHeader
        title="Knowledge Base"
        description="Use your custom knowledge to enhance responses."
      />
      {/* ... (rest of the knowledge base section code remains the same) */}
    </section>
  </LazySection>
)}

// ... (rest of the code remains the same)

// Main chat section with messages
<ErrorBoundary>
  <section className="relative space-y-4 py-4 sm:py-8 sm:py-12">
    {messages.length === 0 ? (
      <div className="mx-auto max-w-2xl text-center">
        <h2 className="mt-2 text-xl font-semibold">{selectedPersona ? `Chat with ${selectedPersona.label}` : 'Playground'}</h2>
      </div>
    ) : null}

  {/* Messages container - optimized for performance with progressive rendering */}
    <div className="space-y-4">
      {messages.map((message, index) => {
      // Only the latest messages need LazySection, earlier messages are already loaded
      const useDelayedLoading = index > messages.length - 5 && messages.length > 10;
      
      // Use LazySection for more recent messages to improve scrolling performance
      return useDelayedLoading ? (
        <LazySection 
          key={message.id}
          threshold={0.1} 
          rootMargin="100px 0px"
          delayMs={index * 50} // Stagger the appearance
          animationClass={message.role === 'user' ? 'fade-in-right' : 'fade-in-left'}
        >
          <Message
            message={message}
            isLoading={index === messages.length - 1 && isTyping}
          />
        </LazySection>
      ) : (
        <Message
          key={message.id}
          message={message}
          isLoading={index === messages.length - 1 && isTyping}
        />
      );
      })}
    </div>
  </section>
</ErrorBoundary>

                        onCheckedChange={(checked) => setUseKnowledgeBase(checked)}
                        aria-label="Use Knowledge Base"
                      />
                      <Label htmlFor="use-knowledge-base" className="text-sm text-muted-foreground cursor-pointer flex-1">
                        Use Knowledge Base
                      </Label>
                    </div>
                    {useKnowledgeBase && (
                      <Select
                        value={selectedKnowledgeBase || ''}
                        onValueChange={(value: string) => setSelectedKnowledgeBase(value)}
                        disabled={knowledgeBases.length === 0}
                      >
                        <SelectTrigger className="w-full text-sm rounded-lg border-border focus:ring-1 focus:ring-primary">
                          <SelectValue placeholder={knowledgeBases.length > 0 ? "Select a knowledge base" : "No knowledge bases found"} />
                        </SelectTrigger>
                        <SelectContent className="rounded-lg">
                          {knowledgeBases.length > 0 ? (
                            knowledgeBases.map((kb) => (
                              <SelectItem key={kb.id} value={kb.id} className="text-sm cursor-pointer">
                                <div className="flex flex-col py-1">
                                  <span className="font-medium">{kb.name}</span>
                                  <span className="text-xs text-muted-foreground">
                                    {kb.documentCount} document{kb.documentCount !== 1 ? 's' : ''}
                                  </span>
                                </div>
                              </SelectItem>
                            ))
                          ) : (
                            <div className="p-2 text-sm text-muted-foreground text-center">No knowledge bases available.</div>
                          )}
                        </SelectContent>
                      </Select>
                    )}
                    {/* Error message display if needed */}
                    {false && useKnowledgeBase && <p className="text-xs text-destructive mt-1.5 px-1">Error message would go here</p>}
                  </div>

                  <Separator className="my-4" />

                  {/* Model Settings */} 
                  <div className="space-y-3">
                    <Label className="text-sm font-medium flex items-center gap-2 text-foreground">
                      <Zap className="h-4 w-4 text-primary" />
                      Model Parameters
                    </Label>
                    
                    {/* AI Model Selection (from active persona, display only) */}
                    <div className="space-y-1.5 p-3 rounded-lg border border-border bg-background/50">
                      <Label htmlFor="model-display" className="text-xs text-muted-foreground">AI Model (from Persona)</Label>
                      <Input id="model-display" value={`${activePersona.model.replace('gpt-','GPT ')} - ${aiModels.find(m => m.id === activePersona.model)?.description || 'Custom'}`} readOnly className="text-xs h-8 bg-muted/50"/>
                    </div>

                    {/* Temperature Setting */}
                    <div className="space-y-1.5 p-3 rounded-lg border border-border bg-background/50">
                      <div className="flex justify-between items-center">
                        <Label htmlFor="temperature-slider" className="text-xs text-muted-foreground">Temperature</Label>
                        <span className="text-xs font-medium text-primary">{temperature.toFixed(1)}</span>
                      </div>
                      <Slider
                        id="temperature-slider"
                        min={0}
                        max={1}
                        step={0.1}
                        value={[temperature]}
                        onValueChange={(value: number[]) => setTemperature(value[0])}
                        className="w-full [&>span:first-child]:h-1.5 [&>span:first-child>span]:h-1.5 [&>span:first-child>span]:w-1.5 [&>span:first-child>span]:border-2"
                      />
                      <div className="flex justify-between text-[10px] text-muted-foreground/80">
                        <span>Precise</span>
                        <span>Neutral</span>
                        <span>Creative</span>
                      </div>
                    </div>

                    {/* Max Tokens Setting */}
                    <div className="space-y-1.5 p-3 rounded-lg border border-border bg-background/50">
                      <div className="flex justify-between items-center">
                        <Label htmlFor="max-tokens-slider" className="text-xs text-muted-foreground">Max Response Length</Label>
                        <span className="text-xs font-medium text-primary">{maxTokens} tokens</span>
                      </div>
                      <Slider
                        id="max-tokens-slider"
                        min={100}
                        max={4000}
                        step={100}
                        value={[maxTokens]}
                        onValueChange={(value: number[]) => setMaxTokens(value[0])}
                        className="w-full [&>span:first-child]:h-1.5 [&>span:first-child>span]:h-1.5 [&>span:first-child>span]:w-1.5 [&>span:first-child>span]:border-2"
                      />
                    </div>

                    {/* Context Window */}
                    <div className="space-y-1.5 p-3 rounded-lg border border-border bg-background/50">
                      <Label htmlFor="context-window-select" className="text-xs text-muted-foreground">Context Window</Label>
                      <Select value={String(contextWindow)} onValueChange={(val: string) => setContextWindow(parseInt(val))}>
                        <SelectTrigger id="context-window-select" className="w-full text-xs h-8 rounded-md border-border focus:ring-1 focus:ring-primary">
                          <SelectValue placeholder="Select context window" />
                        </SelectTrigger>
                        <SelectContent className="rounded-md">
                          <SelectItem value="5" className="text-xs">Last 5 messages</SelectItem>
                          <SelectItem value="10" className="text-xs">Last 10 messages</SelectItem>
                          <SelectItem value="20" className="text-xs">Last 20 messages</SelectItem>
                          <SelectItem value="100" className="text-xs">All messages (Max 100)</SelectItem>
                        </SelectContent>
                      </Select>
                    </div>
                  </div>
                </div>
                </ScrollArea>
              </CardContent>
              <CardFooter className="p-4 border-t space-y-2 bg-card/90 backdrop-blur-sm sticky bottom-0 z-10">
                <div className="flex gap-2 w-full">
                  <Button 
                    variant="outline"
                    className="flex-1 hover:bg-[#2a52be]/10 hover:text-[#2a52be] transition-colors duration-300"
                    onClick={() => {
                      setTemperature(0.7);
                      setMaxTokens(1000);
                      setContextWindow(10);
                      toast.success('Settings reset to defaults');
                    }}
                  >
                    <RotateCw className="mr-2 h-4 w-4" />
                    Reset Defaults
                  </Button>
                  
                  <Button 
                    variant="outline" 
                    className="flex-1 hover:bg-[#2a52be]/10 hover:text-[#2a52be] transition-colors duration-300"
                    onClick={() => {
                      // Logic to handle chat export
                      const chatToExport = {
                        persona: activePersona,
                        settings: {
                          temperature,
                          maxTokens,
                          contextWindow,
                          useKnowledgeBase,
                          selectedKnowledgeBaseId: selectedKnowledgeBase,
                        },
                        messages: messages.map(m => ({ 
                          role: m.role, 
                          content: m.content, 
                          timestamp: m.timestamp,
                          sources: m.sources?.map(s => ({ title: s.title, similarity: s.similarity }))
                        }))
                      };
                      const jsonString = `data:text/json;charset=utf-8,${encodeURIComponent(
                        JSON.stringify(chatToExport, null, 2)
                      )}`;
                      const link = document.createElement("a");
                      link.href = jsonString;
                      link.download = `playground_chat_${activePersona.name.replace(/\s+/g, '_').toLowerCase()}_${new Date().toISOString().split('T')[0]}.json`;
                      link.click();
                      toast.success("Chat exported successfully!")
                    }}
                  >
                    <Download className="mr-2 h-4 w-4" /> Export Chat
                  </Button>
                </div>
              </CardFooter>
            </Card>
          )}
        </div>
      </div>
    </TooltipProvider>
  )
}
